<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADoyJwA6MicAOjInADoyJwA6MicAOjInADoyJwA6MicAOjInADoy
        JwA6MicAOjInADoyJwA6MicAOjInADoyJwA6MicAOjInADoyJwA6MicAOjInADoyJwA6MicAOjInADoy
        JwA6MicAOjInADoyJwA6MicAAAAAAAAAAAAAAAAAOjInADoyJwM6MidJOjElazkvJGk5MCRpOTAkaTkw
        JGk5MCRpOS8kaTkwJGk6MidpOTAmaTgvJmk4MCZpODAmaToxJmk5MCRpOS8kaTkvJGk6MSVpOTEmaTgw
        Jmk4MCZpODAmaTkxJms6MidFOjInAjoyJwAAAAAAAAAAAAAAAAA6MicAOjInFjoyJ9U9OjH/QEI8/0BC
        PP9AQjz/QEI8/0BCPP9AQjz/Pz43/zozKP9DPCz/SEIv/0hCL/9GPy7/PDYr/z9AOv9AQjz/QEI8/z07
        M/9BOiv/SEIv/0hCL/9IQi//QDkr/zoyJ8k6MicPOjInAAAAAAAAAAAAAAAAADoyJwA6MicZOTAk21Fy
        e/9rudj/a7fW/2u31v9rt9b/a7fW/2u52f9gmrD/PTow/4WIVf+uuG7/rbdu/5uiYf9MUkf/ZanE/2u4
        1/9rudn/U3qH/3FwR/+tt27/rLZt/623bv9sbEb/OC8mzTkxJxA5MScAOjEnAAAAAAAAAAAAOjInADoy
        Jxk5LyTbVn2K/3TR+P90z/b/dM/2/3TP9v90z/b/dNL5/2etyf8+OzL/kphd/8PQe//Bz3v/rbZs/1BY
        Tv9uweP/ddP6/3XU/P9YiJr/entN/8LPe//AzXr/wtB7/3V3TP83LyXbOjInIzoyJwA6MicAAAAAAAAA
        AAA6MicAOjInGTkvJNtVfYn/dND2/3PO9P9zzvT/c870/3PO9P900Pf/ZqzH/z47Mv+Rl1z/wc96/8DN
        ev+stWz/S05C/1uQpv9ipL7/Y6XA/0xpdP95ek3/wc56/8HOev+rtW3/VlI4/zkxJv86MieiOjInBzoy
        JwAAAAAAAAAAADoyJwA6MicZOS8k21V9if900fj/c8/2/3PP9f900Pb/c8/1/3TS+f9nrMj/Pjsy/5GX
        XP/Bz3r/wM15/7fDdP99gFH/ZmZF/2BiRf9jZEb/ampG/5yjY//Cz3v/rLZt/1tYO/85MSb/OjIn+zoy
        J4w6MicGOjInAAAAAAAAAAAAOjInADoyJxk5MCTbVHiD/1yPof9gm7H/Y6O7/1qLm/9osM3/WIWT/1+Y
        rf8+PDP/kZdc/8HPev+/zHn/wM16/8HOev+2wnP/rLZt/623bv+6xnb/ws97/6y2bf9bWDv/ODAm/zkx
        J/86MifUOjInGDoyJwA6MicAAAAAAAAAAAA6MicAOjInGTkwJNtSdX7/RlJQ/09rcv9UeoX/Q0pH/16U
        qP8+PDT/WIST/z89Nf+Rl1z/wc96/8DNev+yvXH/f4JR/1ZTN/9LRTH/S0Yx/11bO/+PlVv/c3RK/zcu
        Jf88NCj/Qz0t/zoyJ805MScQOTEnADkzJwAAAAAAAAAAADoyJwA6MicZOTAk21N1f/9JWlv/UXJ6/1Z/
        jf9GU1L/X5it/0FFQP9Zh5b/Pz01/5GXXP/C0Hv/rbdu/1tZO/9KQzn/hH95/6yopP+lop3/dG5n/0U+
        Mf9BOyv/SUQw/3Z3TP9tbUf/ODAmzjkxJxE5MScAAAAAAAAAAAAAAAAAOjInADoyJxk5MCTbVXuH/2m0
        0f9ruNf/bLvb/2ixzf9uweP/aK/L/2Oju/8+OzL/kpdc/7vId/9lZEH/V1BI/8zKyP/+/v7/////////
        ///5+fj/sa6q/0Y+NP90dUr/vcl4/3V3TP83LyXOOTEnETkxJwAAAAAAAAAAAAAAAAA6MicAOjInGTkw
        JNtTd4L/VoCN/1yPof9fma7/VHqG/2apxP9Rcnz/XZOm/z48NP+TmV3/m6Ji/0U+Mf+9urb/////////
        ////////////////////////k4+J/0xHMv+vum//dndM/zcvJc45MScROTEnAAAAAAAAAAAAAAAAADoy
        JwA6MicZOTAk21J0fv9FUU//Tmpx/1R5hf9CSUX/XpSo/z06Mv9YhJP/Pz01/5OYXf97fk7/XFVN//Dv
        7//////////////////////////////////U0tD/SEE1/5WcX/93eEz/Ny8lzjkxJxE5MScAAAAAAAAA
        AAAAAAAAOjInADoyJxk5MCTbU3aA/01ma/9Ve4f/WYeX/0tfY/9hnbT/RlRT/1qLm/8/PTT/kpdd/29w
        Rv9rZF3/+Pj4/////////////////////////////////+Tj4v9PSD7/jZJZ/3d5Tf83LyXOOTEnETkx
        JwAAAAAAAAAAAAAAAAA6MicAOjInGTkvJNtVe4f/bbzd/22/4P9uweP/bLrZ/3DF6P9sutn/ZKa//z47
        Mv+TmF3/fH9P/1tUTP/v7+7/////////////////////////////////0tDO/0dANf+XnmD/d3hM/zcv
        Jc45MScROTEnAAAAAAAAAAAAAAAAADoyJwA6MicZOTAk21N2gf9QcHj/V4OR/1uOoP9OanD/Y6K6/0tf
        Y/9bjqD/Pj00/5OZXf+cpGP/RT4x/7m2s/////////////////////////////7+/v+Qi4b/S0Yx/7C6
        b/92d0z/Ny8lzjkxJxE5MScAAAAAAAAAAAAAAAAAOjInADoyJxk5MCTbUnR+/0VQT/9OanH/VHmE/0JJ
        Rf9elKf/PToy/1iEkv8/PTX/k5hd/73JeP9nZkL/VE1E/8jFwv/9/f3////////////39/f/raml/0Y/
        NP+Ag1L/wc56/3Z3TP83LyXOOTEnETkxJwAAAAAAAAAAAAAAAAA6MicAOjInGTkwJNtTd4H/UnN9/1iG
        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
        //+AAf//gAH//+AD///wD/////////////8=
</value>
  </data>
</root>