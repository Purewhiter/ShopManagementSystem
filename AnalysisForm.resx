<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACFdXIAhHRyAIR0cgCEdHIAhHRyCIR0cjKEdHJuhHRypIR0
        cseEdHLZhHRy4IR0ctqEdHLEhHRymoR0clyEdHIihXVxAoR0cgCEdHIAhHRyAIV2cAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhHRyAIR0cgCEdHIAhHRyDYR0clWEdHKvhHRy5oR0
        cvyEdHL/hHRy/4R0cv+EdHL/hHRy/4R0cv+EdHL/hHRy+IR0ctqEdHKYhHRyPoV0cgSEdHIAhXRzAIR0
        cwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIR0cgCEdHIAfnJxAIR0ckCEdHK3hHRy+YR0
        cv+EdHL/hHRy/4R0cv+EdHL7hHRy84R0cvGEdHL2hHRy/YR0cv+EdHL/hHRy/4R0cv+EdHLvhHRymoR0
        ciiEdHIAhHRyAIR0cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEdHIAhHRyAIV0cgeEdHJxhHRy6oR0
        cv+EdHL/hHRy/4R0cuiEdHK0hHRyfIR0clKEdHI7hHRyNoR0ckKEdHJahHRyjYR0csaEdHL1hHRy/4R0
        cv+EdHL/hHRy2YR0claEdHIChHRyAIR0cgAAAAAAAAAAAAAAAAAAAAAAhHRyAIR0cgCEdHIMhHRyi4R0
        cvqEdHL/hHRy/4R0cuaEdHKLhHRyL4RzcgeEdHIAhHRyAIR0cgCEdHIAhHRyAIR0cgCEdHIAhHRyEIR0
        ckmEdHKrhHRy+IR0cv+EdHL/hHRy8YR0cm+EdHIEhHRyAIR0cgAAAAAAAAAAAIR0cgCEdHIAhHRyBoR0
        coqEdHL9hHRy/4R0cv+EdHK2hHRyNYN1bACEdHIAhHNyAIR3cQCEdHIAAAAAAAAAAACFdXAAhHRyAIV0
        cgCEdHIAhHRyAIR0cgmEdHJghHRy3YR0cv+EdHL/hHRy9oR0cnGEdHEChHRyAIR0cgCDdnAAhHRyAIR0
        cgCEdHJkhHRy94R0cv+EdHL9hHRymoR0chSEdHIAhHRyAIR0cgCFenAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIN0cgCEdHIAhHRyAIR0cgCEdHI4hHRyzIR0cv+EdHL/hHRy8IR0ck+EdHIAhXVyAIR0
        cgCEdHIAhHRyLoR0ct+EdHL/hHRy/4R0cqCEdHIOhHRyAIR0cgCGdXEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEdXMAhHVzAIR0cgCEdHIyhHRy2IR0cv+EdHL/hHRyzYR0
        chyEdHIAhHRyAIR0cgWEdHKfhHRy/4R0cv+EdHLDhHRyGoR0cgCEdHIAi3R0AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEdHIAhHRyAIR0cgCEdHJMhHRy74R0
        cv+EdHL/hHRyfYV0cgCEdHIAhHRyPYR0cu+EdHL/hHRy8YR0ckiEdHIAhHRyAIV2cgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEdHIAhHRyAIR1
        cQKEdHKLhHRy/4R0cv+EdHLYhHRyI4B1cgGEdHKThHRy/4R0cv+EdHKlhHRyBYR0cgCDdHMAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACEdHIAhHRyAIR0ciOEdHLdhHRy/4R0cvuEdHJrhHRyHIR0ctSEdHL/hHRy9YR0ckiEdHIAhHRyAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIR0cgCEdHIAfndyAIR0co+EdHL/hHRy/4R0crSEdHJHhHRy8oR0cv+EdHLOhHRyE4R0
        cgCFdXIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAIR0cgCEdHIAhHRyToR0cvqEdHL/hHRy5oR0cnWEdHL+hHRy/4R0
        cqOFc3EBhXRyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEdHIAhHVyAIR0cgCEdHIAhHRyAIR0
        cgCEdHIAhHRyAIR0cgCEdHIAhHRyAIR0cgCEdHIAhHRyAIR0cgCEdHJQhHRy+oR0cv+EdHL5hHRynIR0
        cv+EdHL/hHRyf4R0cgCEc3MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIR1cgD//8wAhHRyL4R0
        cmaEdHJphHRyaYR0cmmEdHJphHRyaYR0cmmEdHJphHRyaYR0cmmEdHJphHRycIR0cseEdHL/hHRy/4R0
        cu6EdHKthHRy/4R0cv+EdHJohHRyAIRzcgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhHRyAIR0
        ch6EdHLRhHRy/4R0cv+EdHL/hHRy/4R0cv+EdHL/hHRy/4R0cv+EdHL/hHRy/4R0cv+EdHL/hHRy/4R0
        cv+EdHL/hHRyr4R0cq6EdHL/hHRy/4R0cmSEdHIAhHV0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACEdHIAhHRyOIR0cvOEdHL/hHRy/4R0cv+EdHL/hHRy/4R0cv+EdHL/hHRy/4R0cv+EdHL/hHRy/4R0
        cv+EdHL/hHRy/4R0csSEdHIwhHRynoR0cv+EdHL/hHRydIR0cgCCdHEAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAIR0cgCEdHI5hHRy8oR0cv+EdHLohHRynIR0cpaEdHKWhHRyloR0cpaEdHKWhHRyloR0
        cpaEdHKWhHRyloR0co6EdHJmhHRyG4R0cgCEdHJ/hHRy/4R0cv+EdHKZg3JxAIR0cgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAhHRyAIR0cjiEdHLyhHRy/4R0csaDdHIMhHRyAIR0cgCEdHIAhHRyAIR0
        cgCEdHIAhHRyAIR0cgCEdHIAhHRyAIR0cgCEdHIAg3NyAIR0clOEdHL2hHRy/4R0csiEdHIPhHRyAIl2
        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
        AACAAAAAgAAAAMAAAAHgAAAD8AAAB/wAAA8=
</value>
  </data>
</root>